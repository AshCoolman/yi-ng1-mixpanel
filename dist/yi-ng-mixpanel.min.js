angular.module('yi.mixpanel', []);


/**
 * NOTE: Tried to bind this to document, but it didnt work, thus relying on global lexical scope.
 */
var MixpanelProvider, MixpanelService, _evalScriptOnWindow;

_evalScriptOnWindow = (function(_this) {
  return function(script) {
    console.log("script", script);
    return eval(script);
  };
})(this);

MixpanelService = function($routeParams, getMixpanel) {
  this.track = function(eventName, eventData) {
    console.log('mixpanel.trackIt', getMixpanel(), eventName, eventData);
    return getMixpanel().track(eventName, eventData);
  };
  return this;
};

MixpanelProvider = (function(_this) {
  return function() {
    var configObj, getMixpanel, identity, locationChange, routeParamsChange;
    getMixpanel = function() {
      return window['mixpanel'];
    };
    identity = null;
    routeParamsChange = null;
    locationChange = null;
    configObj = null;
    _this.setConfig = function(val) {
      if (!(val != null ? val.isActive() : void 0)) {
        return null;
      }
      configObj = val;
      _evalScriptOnWindow(configObj.getScript());
      identity = configObj.identityFunc(getMixpanel());
      locationChange = configObj.locationChange;
      return routeParamsChange = configObj.routeParamsChange;
    };
    _this.$get = function($rootScope, $routeParams, $location) {
      if (!(configObj != null ? configObj.isActive() : void 0)) {
        return {
          track: function() {
            return console.warn('mixpanel analytics inactive');
          }
        };
      }
      $rootScope.$watch((function() {
        return $routeParams;
      }), function(newVal) {
        return routeParamsChange(getMixpanel(), newVal);
      });
      $rootScope.$watch((function() {
        return $location;
      }), function(newVal) {
        return locationChange(getMixpanel(), newVal);
      });
      return new MixpanelService($routeParams, getMixpanel);
    };
    return _this;
  };
})(this);

angular.module('yi.mixpanel').provider('Mixpanel', MixpanelProvider);

angular.module('yi.mixpanel.mixpanel-track', ['yi.mixpanel']);

var mixpanelTrackDirective;

mixpanelTrackDirective = function(Mixpanel) {
  return {
    restrict: 'A',
    link: function($scope, el, attr) {
      return el.on("click", function() {
        var name, payload, ref;
        ref = JSON.parse(attr.mixpanelTrack), name = ref[0], payload = ref[1];
        console.log("Mixpanel.track", MixpanelService, Mixpanel.track, name, payload);
        return Mixpanel.track(name, payload);
      });
    }
  };
};

angular.module('yi.mixpanel.mixpanel-track').directive('mixpanelTrack', mixpanelTrackDirective);
